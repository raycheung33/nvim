{
  "Console log": {
    "prefix": "l",
    "body": ["console.log(`$1` )"]
  },

  "dcStore": {
    "prefix": "dcStore",
    "body": [
      "import {types as tt} from 'mobx-state-tree';",
      "",
      "const Store = tt",
      ".model('$1', {",
      "$2",
      "})",
      "",
      "export default Store;"
    ]
  },

  "dcView": {
    "prefix": "dcView",
    "body": [
      "import * as React from 'react';",
      "import {View} from 'react-native';",
      "import {useStore} from 'mobx-store-provider';",
      "import {observer} from 'mobx-react-lite';",
      "import RootStore from '../root/Store';",
      "import DCText from '../components/DCText';",
      "",
      "const DCView = ({route, navigation}) => {",
      "  const root = useStore(RootStore);",
      "  const self = root.navigation.storeFromRoute(route);",
      "  return <View><DCText></DCText></View>",
      "};",
      "",
      "export default observer(DCView);"
    ]
  },

  "dcIcon": {
    "prefix": "dcIcon",
    "body": [
      "import * as React from 'react';",
      "import { Image } from 'react-native';",
      "",
      "const Icon = ({ focused, color, size }) => {",
      "	return (",
      "		<Image",
      "			style={{",
      "				tintColor: color,",
      "				resizeMode: 'contain',",
      "				height: size,",
      "				width: size,",
      "			}}",
      "			source={require('./res/$1.png')}",
      "		/>",
      "	);",
      "};",
      "",
      "export default Icon;"
    ]
  },

  "dcTab": {
    "prefix": "dcTab",
    "body": [
      "import * as React from 'react';",
      "import RootStore from '../root/Store';",
      "import { useStore } from 'mobx-store-provider';",
      "import Stack from '../app/Stack';",
      "import $1 from './View';",
      "import { observer } from 'mobx-react-lite';",
      "",
      "const Tab = () => {",
      "	const root = useStore(AppStore);",
      "	const str = root.str;",
      "	return (",
      "		<Stack.Navigator>",
      "			<Stack.Group>",
      "				<Stack.Screen",
      "					name={'$1'}",
      "					component={$1}",
      "				/>",
      "			</Stack.Group>",
      "		</Stack.Navigator>",
      "	);",
      "};",
      "",
      "export default observer(Tab);"
    ]
  },

  "dcString": {
    "prefix": "dcString",
    "body": ["$1: tt.optional(tt.string, ''),"]
  },

  "dcID": {
    "prefix": "dcID",
    "body": ["id: tt.optional(tt.identifier, ''),"]
  },

  "dcActions": {
    "prefix": "dcActions",
    "body": [".actions(self => ({", "$1", "}))"]
  },

  "dcViews": {
    "prefix": "dcViews",
    "body": [".views(self => ({", "$1", "}))"]
  },

  "dcFlow": {
    "prefix": "dcFlow",
    "body": ["request: flow(function* request() {", "$1", "}),"]
  },

  "dcComponent": {
    "prefix": "dcComponent",
    "body": [
      "import * as React from 'react';",
      "import {View} from 'react-native'",
      "import {useStore} from 'mobx-store-provider';",
      "import {observer} from 'mobx-react-lite';",
      "import RootStore from '../root/Store';",
      "",
      "const DCView = props => {",
      "  const root = useStore(RootStore);",
      "  const {style, ...rest} = props;",
      "  return <View style={{...style}} {...rest}></View>;",
      "};",
      "",
      "export default observer(DCView);"
    ]
  },

  "dcCommentJSX": {
    "prefix": "dcCommentJSX",
    "body": ["{/* $1 */}"]
  },

  "dcFlatList": {
    "prefix": "dcFlatList",
    "body": [
      "        const saveAreaInsets = useSafeAreaInsets();",
      "",
      "  const renderItem = ({item}) => <ItemView self={item} />;",
      "  const keyExtractor = item => item.id;",
      "",
      "  return (",
      "      <FlatList",
      "        data={self.items.slice()}",
      "        renderItem={renderItem}",
      "        keyExtractor={keyExtractor}",
      "        contentContainerStyle={{",
      "          paddingTop: saveAreaInsets.top,",
      "          paddingBottom: saveAreaInsets.bottom,",
      "          gap: Style.gap,",
      "        }}",
      "      />",
      "  );"
    ]
  },

  "dcFlatList2Column": {
    "prefix": "dcFlatList2Column",
    "body": [
      "const saveAreaInsets = useSafeAreaInsets();",
      "    const {width: screenWidth} = useWindowDimensions();",
      "    const itemWidth = (screenWidth - Style.gap) / 2;",
      "",
      "    const renderItem = ({item}) => <View style={{width: itemWidth}}><ItemView item={item} /></View>;",
      "    const keyExtractor = item => item.id;",
      "",
      "    return (",
      "      <View style={{flex: 1, backgroundColor: color.bg}}>",
      "        <FlatList",
      "          columnWrapperStyle={{ gap: Style.gap}}",
      "          numColumns={2}",
      "          data={self.items.slice()}",
      "          renderItem={renderItem}",
      "          keyExtractor={keyExtractor}",
      "          contentContainerStyle={{",
      "            paddingTop: saveAreaInsets.top,",
      "            paddingBottom: saveAreaInsets.bottom,",
      "            gap: Style.gap,",
      "          }}",
      "        />",
      "      </View>",
      "    );",
      "  };"
    ]
  },

  "dcItemView": {
    "prefix": "dcItemView",
    "body": [
      "      import * as React from 'react';",
      "  import {View} from 'react-native';",
      "  import {useStore} from 'mobx-store-provider';",
      "  import {observer} from 'mobx-react-lite';",
      "  import RootStore from '../root/Store';",
      "  import DCText from '../components/DCText';",
      "",
      "  const DCView = ({self}) => {",
      "    const root = useStore(RootStore);",
      "    return (",
      "      <View>",
      "        <DCText>Item View</DCText>",
      "      </View>",
      "    );",
      "  };",
      "",
      "  export default observer(DCView);"
    ]
  },

  "dcUseLayoutEffect": {
    "prefix": "dcUseLayoutEffect",
    "body": [
      "      React.useLayoutEffect(() => {",
      "      navigation.setOptions({",
      "        headerTitle: str.t('$1'),",
      "        headerLargeTitle: true,",
      "        headerStyle: {",
      "          backgroundColor: color.bg,",
      "        },",
      "        headerTitleStyle: {",
      "          color: color.primary,",
      "        },",
      "      });",
      "    }, []);"
    ]
  },

  "dcEnv": {
    "prefix": "dcEnv",
    "body": [
      "      import api from '../server/api';",
      "  import sleep from '../utils/sleep';",
      "",
      "  const online = {",
      "    request: async json => {",
      "      return await api.getData('/customer/$1', json);",
      "    },",
      "  };",
      "",
      "  const mockResponses = [",
      "    {",
      "      failure: {message: 'mockError', sc_trace_id: 'a0b1c2d3'},",
      "    },",
      "    {",
      "      success: {},",
      "    },",
      "  ];",
      "  let mockResponsesID = 0;",
      "",
      "  const offline = {",
      "    request: async () => {",
      "      await sleep();",
      "      let mockResponse = mockResponses[mockResponsesID];",
      "      mockResponsesID = (mockResponsesID + 1) % mockResponses.length;",
      "      if (mockResponse.success) {",
      "        return mockResponse.success;",
      "      } else {",
      "        throw mockResponse.failure;",
      "      }",
      "    },",
      "  };",
      "",
      "  const current = isOnline => {",
      "    return isOnline ? online : offline;",
      "  };",
      "",
      "  export {online, offline, current};"
    ]
  },

  "dcSubview": {
    "prefix": "dcSubview",
    "body": ["const $1 = observer(()=>(<View></View>))"]
  },

  "dcViewObserver": {
    "prefix": "dcViewObserver",
    "body": ["      const $1 = observer(() => (", "      <$2></$2>", "    ));"]
  },
  "dcSkeleton": {
    "prefix": "dcSkeleton",
    "body": ["<Sk show={isLoading}>"]
  }
}
